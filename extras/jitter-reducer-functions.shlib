#!/system/bin/sh

function forceOnlineCPUs()
{
    local i
    for i in `seq 0 9`; do
        if [ -e "/sys/devices/system/cpu/cpu$i/online" ]; then
            chmod 644 "/sys/devices/system/cpu/cpu$i/online"
            echo '1' >"/sys/devices/system/cpu/cpu$i/online"
        fi
    done
}

function searchDefaultCpuGovernor()
{
    # Search default CPU governor
    local gov=""
    local i
    for i in `cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors`; do
        if [ "$i" = "schedutil" ]; then
            gov="schedutil"
            break;
        elif [ ! "$gov" = "schedplus" ]; then
             if [ "$i" = "schedplus" ]; then
                gov="$i"
            elif [ ! "$gov" = "interactive" ]; then
                gov="$i"
            fi
        fi
    done
    if [ -z "$gov" ]; then
        gov="performance"
    fi
    echo "$gov"
}

function reduceSelinuxJitter()
{
    if [ $# -eq 2 ]; then
        local flag="$1"
        local printStatus="$2"
        
        if [ $flag -gt 0 ]; then
            setenforce 0
        elif [ $flag -lt 0 ]; then
            setenforce 1
        fi
        
        if [ $printStatus -gt 0 ]; then
            echo "  Selinux mode: `getenforce`"
        fi
    else
        return 1
    fi
}

function reduceThermalJitter()
{
    if [ $# -eq 2 ]; then
        local flag="$1"
        local printStatus="$2"
        
        if [ $flag -gt 0 ]; then   
         
            # Stop thermal core control
            if [ -w "/sys/module/msm_thermal/core_control/enabled" ]; then
                echo '0' > "/sys/module/msm_thermal/core_control/enabled"
            fi
            # Stop the MPDecision (CPU hotplug)
            if [ "`getprop init.svc.mpdecision`" = "running" ]; then
                setprop ctl.stop mpdecision
                forceOnlineCPUs
            elif [ "`getprop init.svc.vendor.mpdecision`" = "running" ]; then
                setprop ctl.stop vendor.mpdecision
                forceOnlineCPUs
            fi
            # Stop the thermal server
            if [ "`getprop init.svc.thermal`" = "running" ]; then
                setprop ctl.stop thermal
            fi
            # For MediaTek CPU's
            if [ -w "/proc/cpufreq/cpufreq_sched_disable" ]; then
                echo '1' > "/proc/cpufreq/cpufreq_sched_disable"
                forceOnlineCPUs
            fi
        
        elif [ $flag -lt 0 ]; then
        
            # Start thermal core control
             if [ -w "/sys/module/msm_thermal/core_control/enabled" ]; then
                echo '1' > "/sys/module/msm_thermal/core_control/enabled"
            fi
            # Start the MPDecision (CPU hotplug)
            if [ "`getprop init.svc.mpdecision`" = "stopped" ]; then
                setprop ctl.start mpdecision
                forceOnlineCPUs
            elif [ "`getprop init.svc.vendor.mpdecision`" = "stopped" ]; then
                setprop ctl.start vendor.mpdecision
                forceOnlineCPUs
            fi
            # Start the thermal server
            if [ "`getprop init.svc.thermal`" = "stopped" ]; then
                setprop ctl.start thermal
            fi
            # For MediaTek CPU's
            if [ -w "/proc/cpufreq/cpufreq_sched_disable" ]; then
                val="`searchDefaultCpuGovernor`"
                if [ "$val" = "schedutil" ]; then
                    echo "    Notice: EAS has been enabled, so skipping thermal MTK EAS+ enabling" 1>&2
                else
                    echo '0' > "/proc/cpufreq/cpufreq_sched_disable"
                fi
            fi
        
        fi
      
        if [ $printStatus -gt 0 ]; then
            # Qualcomm Core control
            if [ -w "/sys/module/msm_thermal/core_control/enabled" ]; then
                if [ "`cat /sys/module/msm_thermal/core_control/enabled`" -eq 0 ]; then
                    echo "  Thermal core control: stopped"
                else
                    echo "  Thermal core control: running"
                fi
            elif [ -n "`getprop init.svc.thermal`" ]; then
                echo "  Thermal server: `getprop init.svc.thermal`"
            else
                echo "  Thermal control: N/A"
            fi

            # MPDecision
            if [ -n "`getprop init.svc.mpdecision`" ]; then
                echo "  Thermal MPDecision: `getprop init.svc.mpdecision`"
            elif [ -n "`getprop init.svc.vendor.mpdecision`" ]; then
                echo "  Thermal MPDecision: `getprop init.svc.vendor.mpdecision`"
            fi

            # MediaTek EAS+ scheduling
            if [ -r "/proc/cpufreq/cpufreq_sched_disable" ]; then
                set `cat /proc/cpufreq/cpufreq_sched_disable`
                val=$3
                if [ "$val" -eq '1' ]; then
                    echo "  Thermal MTK EAS+: stopped"
                else
                    echo "  Thermal MTK EAS+: running"
                fi
            fi
        # End of status print section
        fi
        
    else
        return 1
    fi
}

function getQcomGpuFreq()
{
    local isMax="0"
    
    if [ $# -eq 1  -a  "$1" = "max" ]; then
        isMax="1"
    fi
    
    if [ -r "/sys/class/kgsl/kgsl-3d0/gpu_available_frequencies"  -a  -r "/sys/class/kgsl/kgsl-3d0/min_pwrlevel" ]; then
        local tab x y freq=""
        
        read tab <"/sys/class/kgsl/kgsl-3d0/gpu_available_frequencies"
        if [ -z "$tab" ]; then
            return 1
        fi
        set $tab 1>"/dev/null" 2>&1
        
        if [ "$isMax" -eq 1 ]; then
            freq="$1"
        elif [ -r "/sys/class/kgsl/kgsl-3d0/default_pwrlevel" ]; then
            read x <"/sys/class/kgsl/kgsl-3d0/min_pwrlevel"
            read y <"/sys/class/kgsl/kgsl-3d0/default_pwrlevel"
            if [ "$y" -lt "$x" ]; then
                x="$y"
            fi
            if [ "$x" -lt $# ]; then
                shift $x
            fi
            freq="$1"
        else
            # no estimation possible, so check the current real GPU clock
            read freq <"/sys/class/kgsl/kgsl-3d0/gpuclk"
        fi
        
        if [ -n "$freq" ]; then
            echo "$freq"
            return 0
        else
            return 1
        fi
        
    else
        return 1
    fi
}

function getMtkGpuFreqKhz()
{
    local isMax="0"
    
    if [ $# -eq 1  -a  "$1" = "max" ]; then
        isMax="1"
    fi
    
    if [ -r "/proc/gpufreq/gpufreq_opp_dump" ]; then
        local x1 x2 x3 x4 x5 freq="" IFS=" ,"
        
        if [ "$isMax" -eq 1 ]; then
            read x1 x2 x3 x4 x5 <"/proc/gpufreq/gpufreq_opp_dump"
            freq="$x4"
        else
            while read x1 x2 x3 x4 x5; do
                freq="$x4"
            done <"/proc/gpufreq/gpufreq_opp_dump"
        fi
        
        if [ -n "$freq" ]; then
            echo "$freq"
            return 0
        else
            return 1
        fi
        
    else
        return 1
    fi
}

function isMtkGpuFreqFixed()
{
    if [ -r "/proc/gpufreq/gpufreq_opp_freq" ]; then
        local x1 x2 x3 x4 x5
        read x1 x2 x3 x4 x5 <"/proc/gpufreq/gpufreq_opp_freq"
        if [ "$x5" = "enabled" ]; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

function reduceGovernorJitter()
{
    if [ $# -eq 2 ]; then
        local flag="$1"
        local printStatus="$2"

        if [ $flag -gt 0 ]; then
        
            # CPU governor
            # prevent CPU offline stuck by forcing online between double  governor writing 
            local i
            for i in `seq 0 9`; do
                if [ -e "/sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor" ]; then
                    chmod 644 "/sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor"
                    echo 'performance' >"/sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor"
                    chmod 644 "/sys/devices/system/cpu/cpu$i/online"
                    echo '1' >"/sys/devices/system/cpu/cpu$i/online"
                    echo 'performance' >"/sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor"
                fi
            done
            # GPU's
            if [ -w "/sys/class/kgsl/kgsl-3d0/pwrscale/trustzone/governor" ]; then
                # For old Qcomm GPU's
                echo 'performance' >"/sys/class/kgsl/kgsl-3d0/pwrscale/trustzone/governor"
                if [ -w "/sys/class/kgsl/kgsl-3d0/min_pwrlevel" ]; then
                    # Set the min power level to be maximum
                    echo "0" >"/sys/class/kgsl/kgsl-3d0/min_pwrlevel"
                fi
            elif [ -w "/sys/class/kgsl/kgsl-3d0/devfreq/governor" ]; then
                # For Qcomm GPU's
                echo 'performance' >"/sys/class/kgsl/kgsl-3d0/devfreq/governor"
                if [ -w "/sys/class/kgsl/kgsl-3d0/min_pwrlevel" ]; then
                    # Set the min power level to be maximum
                    echo "0" >"/sys/class/kgsl/kgsl-3d0/min_pwrlevel"
                fi
            elif [ -w "/proc/gpufreq/gpufreq_opp_freq" ]; then
                # Maximum fixed frequency setting for MediaTek GPU's
                local freq="`getMtkGpuFreqKhz \"max\"`"
                if [ -n "$freq" ]; then
                    echo "$freq" >"/proc/gpufreq/gpufreq_opp_freq"
                fi
            fi
            
        elif [ $flag -lt 0 ]; then
        
            local gov="`searchDefaultCpuGovernor`"
            # prevent CPU offline stuck by forcing online between double  governor writing
            local i
            for i in `seq 0 9`; do
                if [ -e "/sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor" ]; then
                    chmod 644 "/sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor"
                    echo "$gov" >"/sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor"
                    chmod 644 "/sys/devices/system/cpu/cpu$i/online"
                    echo '1' >"/sys/devices/system/cpu/cpu$i/online"
                    echo "$gov" >"/sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor"
                fi
            done

            if [ -w "/sys/class/kgsl/kgsl-3d0/pwrscale/trustzone/governor" ]; then
                # Default GPU governor for old Qcomm GPU's
                echo 'ondemand' >"/sys/class/kgsl/kgsl-3d0/pwrscale/trustzone/governor"
                if [ -r "/sys/class/kgsl/kgsl-3d0/num_pwrlevels"  -a  -w "/sys/class/kgsl/kgsl-3d0/min_pwrlevel" ]; then
                    # Set the min power level to be minimum
                    local x="4"
                    read x <"/sys/class/kgsl/kgsl-3d0/num_pwrlevels"
                    x="`expr $x - 1`"
                    if [ -n "$x" ]; then
                        echo "$x" >"/sys/class/kgsl/kgsl-3d0/min_pwrlevel"
                    fi
                fi
            elif [ -w "/sys/class/kgsl/kgsl-3d0/devfreq/governor" ]; then
                # Default GPU governor for Qcomm GPU's
                echo 'msm-adreno-tz' >"/sys/class/kgsl/kgsl-3d0/devfreq/governor"
                if [ -r "/sys/class/kgsl/kgsl-3d0/num_pwrlevels"  -a  -w "/sys/class/kgsl/kgsl-3d0/min_pwrlevel" ]; then
                    # Set the min power level to be minimum
                    local x="6"
                    read x <"/sys/class/kgsl/kgsl-3d0/num_pwrlevels"
                    x="`expr $x - 1`"
                    if [ -n "$x" ]; then
                        echo "$x" >"/sys/class/kgsl/kgsl-3d0/min_pwrlevel"
                    fi
                fi
            elif [ -w "/proc/gpufreq/gpufreq_opp_freq" ]; then
                # Variable frequency setting for MediaTek GPU's
                echo '0' >"/proc/gpufreq/gpufreq_opp_freq"
            fi
            
        fi
        
        if [ $printStatus -gt 0 ]; then
            #CPU Governor
            if [ -r "/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor" ]; then
                echo "  Governor CPU: `cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor`"
            fi
            
            if [ -r "/sys/class/kgsl/kgsl-3d0/pwrscale/trustzone/governor" ]; then
                # For old Qcomm GPU Governor
                local freq gov
                read gov <"/sys/class/kgsl/kgsl-3d0/pwrscale/trustzone/governor"
                if [ "$gov" = "performance" ]; then
                    freq="`getQcomGpuFreq \"max\"`"
                    freq="`expr $freq / 1000000`MHz"
                    echo "  Governor GPU: performance (fixed: $freq)"
                else
                    freq="`getQcomGpuFreq \"typical\"`"
                    freq="`expr $freq / 1000000`Mhz"
                    echo "  Governor GPU: $gov (typical: $freq)"
                fi
            elif [ -w "/sys/class/kgsl/kgsl-3d0/devfreq/governor" ]; then
                # For Qcomm GPU Governor
                local freq gov
                read gov <"/sys/class/kgsl/kgsl-3d0/devfreq/governor"
                if [ "$gov" = "performance" ]; then
                    freq="`getQcomGpuFreq \"max\"`"
                    freq="`expr $freq / 1000000`MHz"
                    echo "  Governor GPU: performance (fixed: $freq)"
                else
                    freq="`getQcomGpuFreq \"typical\"`"
                    freq="`expr $freq / 1000000`MHz"
                    echo "  Governor GPU: $gov (typical: $freq)"
                fi
            elif [ -r "/proc/gpufreq/gpufreq_opp_freq" ]; then
                # For getting MediaTek GPU settings
                local freq
                if isMtkGpuFreqFixed; then
                    freq="`getMtkGpuFreqKhz \"max\"`"
                    freq="`expr $freq / 1000`MHz"
                    echo "  Governor GPU: max freq (fixed: $freq)"
                else
                    freq="`getMtkGpuFreqKhz \"typical\"`"
                    freq="`expr $freq / 1000`MHz"
                    echo "  Governor GPU: variable freq (typical: $freq)"
                fi
            fi
        fi
        
    else
        return 1
    fi
}

function reduceCameraJitter()
{
    if [ $# -eq 2 ]; then
        local flag="$1"
        local printStatus="$2"

        if [ $flag -gt 0 ]; then
        
            # Stop the camera servers
            if [ "`getprop init.svc.qcamerasvr`" = "running" ]; then
                setprop ctl.stop qcamerasvr
            fi
            if [ "`getprop init.svc.vendor.qcamerasvr`" = "running" ]; then
                setprop ctl.stop vendor.qcamerasvr
            fi
            if [ "`getprop init.svc.cameraserver`" = "running" ]; then
                setprop ctl.stop cameraserver
            fi
            if [ "`getprop init.svc.camerasloganserver`" = "running" ]; then
                setprop ctl.stop camerasloganserver
            fi
            if [ "`getprop init.svc.camerahalserver`" = "running" ]; then
                setprop ctl.stop camerahalserver
            fi
            
        elif [ $flag -lt 0 ]; then
        
            # Start the camera servers
            if [ "`getprop init.svc.qcamerasvr`" = "stopped" ]; then
                setprop ctl.start qcamerasvr
            fi
            if [ "`getprop init.svc.vendor.qcamerasvr`" = "stopped" ]; then
                setprop ctl.start vendor.qcamerasvr
            fi
            if [ "`getprop init.svc.cameraserver`" = "stopped" ]; then
                setprop ctl.start cameraserver
            fi
            if [ "`getprop init.svc.camerasloganserver`" = "stopped" ]; then
                setprop ctl.start camerasloganserver
            fi
            if [ "`getprop init.svc.camerahalserver`" = "stopped" ]; then
                setprop ctl.start camerahalserver
            fi
            
        fi
        
        if [ $printStatus -gt 0 ]; then
            local val="`getprop init.svc.qcamerasvr`"
            if [ -n  "$val" ]; then
                echo "  Qcom camera server: $val"
                return 0
            fi
            val="`getprop init.svc.vendor.qcamerasvr`"
            if [ -n  "$val" ]; then
                echo "  Qcom camera server: $val"
                return 0
            fi
            val="`getprop init.svc.cameraserver`"
            if [ -n  "$val" ]; then
                echo "  Camera server: $val"
                return 0
            fi
        fi
        
    else
        return 1
    fi
}

# choose the best I/O scheduler for very Hifi audio outputs, and output it into the standard output
function chooseBestIOScheduler()
{
    if [ $# -eq 1  -a  -r "$1" ]; then
        local x scheds ret_val=""
  
        scheds="`tr -d '[]' <\"$1\"`"
        for x in $scheds; do
            case "$x" in
                "deadline" ) ret_val="deadline"; break ;;
                "cfq" ) ret_val="cfq" ;;
                "noop" ) if [ "$ret_val" != "cfq" ]; then ret_val="noop"; fi ;;
                * ) ;;
            esac
        done
        echo "$ret_val"
        return 0
    else
        return 1
    fi
}

function selectedScheduler()
{
    if [ $# -eq 1  -a  -r "$1" ]; then
        local sched="`cat \"$1\"`"
        if [ -n "$sched" ]; then
            local val
            val=`expr "$sched" : '[^[]*\[\([^]]*\)\]'`
            echo "$val"
            return 0
        else
            return 1
        fi
        
    else
        return 1
    fi
}

function validScheduler()
{
    if [ $# -eq 2  -a  -r "$1" ]; then
        local lst
        local sched="$2"
        local i
        lst="`tr -d '[]' <\"$1\"`"
        for i in $lst; do
            if [ "$i" = "$sched" ]; then
                return 0
            fi
        done
        return 1
    else
        return 1
    fi
}

function nth()
{
    if [ $# -eq 2  -a  -n "$1" ]; then
    
        if [ -n "$2"  -a  "$2" -gt 0 ]; then
        
            local v
            local i=1
            
            for v in $1; do
                if [ "$2" -eq "$i" ]; then
                    echo "$v"
                    return 0
                else
                    i="`expr $i + 1`"
                fi
            done
            return 1
            
        else
        
            retrun 1
            
        fi
        
    else
    
        return 1
        
    fi
}

function adjustForSoC()
{
    if [ $# -eq 1  -a  -n "$1"  -a  "$1" -ge 0 ]; then
        
        case "`getprop ro.board.platform`" in
            sdm* | msm* | sd* | exynos* )
                echo "`expr  '(' $1 / 10 ')' '*' 10 + '(' '(' '(' $1 % 10 ')'  + 1 ')' / 3 ')' '*' 3`"
                ;;
            mt6* )
                echo "`expr '(' '(' $1 + 1 ')' / 4 ')' '*' 4`"
                ;;
            * )
                echo "$1"
                ;;
        esac
        return 0
        
    else
        
        return 1
        
    fi
}

function adjustSchedulerParameter()
{
    if [ $# -eq 3 ]; then
        
        if [ "$1" = "deadline"  -a  -n "$2"  -a  -n "$3" ]; then
            case "$2" in
                "read_expire" )
                    echo "`adjustForSoC \"$3\"`"
                    ;;
                "write_expire" )
                    echo "`adjustForSoC \"$3\"`"
                    ;;
                * )
                    echo "$3"
                    ;;
            esac
        else
            echo "$3"
        fi
        return 0
        
    else
        
        return 1
        
    fi
}

function getSchedulerParams()
{
    if [ $# -eq 1 ]; then
        case "$1" in
            "deadline" )
                echo "fifo_batch front_merges read_expire write_expire writes_starved"
                ;;
            "cfq" )
                echo "back_seek_penalty fifo_expire_async fifo_expire_sync group_idle low_latency quantum slice_async slice_async_rq \
                    slice_idle slice_sync target_latency"
                ;;
            "noop" | * )
                echo ""
                ;;
        esac
        return 0
    else
        return 1
    fi
}

function getSchedulerValues()
{
    if [ $# -eq 2 ]; then
        case "$1" in
            "deadline" )
                #   fifo_batch front_merges read_expire write_expire writes_starved
                case "$2" in
                    "light" )
                        case "`getprop ro.board.platform`" in
                            sdm* | msm* | sd* | exynos* )
                                echo "37 0 12 480 0"
                                ;;
                            * )
                                echo "37 0 12 480 0"
                                ;;
                        esac
                        ;;
                    "m-light" )
                        case "`getprop ro.board.platform`" in
                            sdm8* )
                                echo "37 0 16 480 0"
                                ;;
                            * )
                                echo "37 0 16 480 0"
                                ;;
                        esac
                        ;;
                    "boost" )
                        case "`getprop ro.board.platform`" in
                            sdm8* )
                                echo "41 0 16 484 0"
                                ;;
                            * )
                                echo "41 0 16 484 0"
                                ;;
                        esac
                        ;;
                    "medium" | * )
                        case "`getprop ro.board.platform`" in
                            sdm8* )
                                echo "38 0 16 484 0"
                                ;;
                            * )
                                echo "39 0 16 480 0"
                                ;;
                        esac
                        ;;
                esac
                ;;
                
            "cfq" )
                #   back_seek_penalty fifo_expire_async fifo_expire_sync group_idle low_latency quantum slice_async slice_async_rq
                #       slice_idle slice_sync target_latency
                case "$2" in
                    "light" )
                        echo "1 3 3 0 1 1 3 23 0 3 3"
                        ;;
                    "m-light" )
                        echo "1 3 3 0 1 1 3 23 0 3 3"
                        ;;
                    "boost" )
                        echo "1 3 3 0 1 1 3 26 0 3 3"
                        ;;
                    "medium" | * )
                        echo "1 3 3 0 1 1 3 24 0 3 3"
                        ;;
                esac
                ;;
                
            "noop" | * )
                echo ""
                ;;
                
        esac
        return 0
    else
        return 1
    fi
}

function getSchedulerNrRequests()
{
    if [ $# -eq 2 ]; then
        case "$1" in
            "deadline" )
                case "$2" in
                    "light" )
                        case "`getprop ro.board.platform`" in
                            sdm8* )
                                echo "40042"
                                ;;
                            sdm* | msm* | sd* | exynos* )
                                echo "39063"
                                ;;
                            * )
                                echo "39573"
                                ;;
                        esac
                        ;;
                    "m-light" )
                        case "`getprop ro.board.platform`" in
                            sdm8* )
                                echo "77600"
                                ;;
                            sdm* | msm* | sd* | exynos* )
                                echo "77130"
                                ;;
                            * )
                                echo "77500"
                                ;;
                        esac
                        ;;
                    "boost" )
                        case "`getprop ro.board.platform`" in
                            sdm8* )
                                echo "79750"
                                ;;
                            sdm* | msm* | sd* | exynos* )
                                echo "79516"
                                ;;
                            mt67* )
                                echo "79601"
                                ;;
                            * )
                                echo "79516"
                                ;;
                        esac
                        ;;
                    "medium" | * )
                        case "`getprop ro.board.platform`" in
                            sdm8* )
                                echo "79120"
                                ;;
                            sdm* | msm* | sd* | exynos* )
                                echo "78150"
                                ;;
                            * )
                                echo "78550"
                                ;;
                        esac
                        ;;
                esac
                ;;
                
            "cfq" )
                case "$2" in
                    "light" )
                        case "`getprop ro.board.platform`" in
                            sdm* | msm* | sd* | exynos* )
                                echo "14476"
                                ;;
                            * )
                                echo "13875"
                                ;;
                        esac
                        ;;
                    "m-light" )
                        case "`getprop ro.board.platform`" in
                            sdm* | msm* | sd* | exynos* )
                                echo "14540"
                                ;;
                            * )
                                echo "14392"
                                ;;
                        esac
                        ;;
                    "boost" )
                        case "`getprop ro.board.platform`" in
                            sdm* | msm* | sd* | exynos* )
                                echo "76000"
                                ;;
                            * )
                                echo "76500"
                                ;;
                        esac
                        ;;
                    "medium" | * )
                        case "`getprop ro.board.platform`" in
                            sdm* | msm* | sd* | exynos* )
                                echo "31170"
                                ;;
                            * )
                                echo "30545"
                                ;;
                        esac
                        ;;
                esac
                ;;
                
            "noop" | * )
                case "$2" in
                    "light" )
                        case "`getprop ro.board.platform`" in
                            sdm* | msm* | sd* | exynos* )
                                echo "14615"
                                ;;
                            * )
                                echo "14133"
                                ;;
                        esac
                        ;;
                    "m-light" )
                        case "`getprop ro.board.platform`" in
                            sdm* | msm* | sd* | exynos* )
                                echo "20650"
                                ;;
                            * )
                                echo "20326"
                                ;;
                        esac
                        ;;
                    "boost" )
                        case "`getprop ro.board.platform`" in
                            sdm* | msm* | sd* | exynos* )
                                echo "61675"
                                ;;
                            * )
                                echo "60915"
                                ;;
                        esac
                        ;;
                    "medium" | * )
                        case "`getprop ro.board.platform`" in
                            sdm* | msm* | sd* | exynos* )
                                echo "30630"
                                ;;
                            * )
                                echo "30555"
                                ;;
                        esac
                        ;;
                esac
               ;;
                
        esac
        return 0
    else
        return 1
    fi
}

function reduceIoJitter() 
{
    if [ $# -eq 4 ]; then
        local flag="$1"
        local ioScheduler="$2"
        local toneMode="$3"
        local printStatus="$4"

        if [ $flag -gt 0 ]; then
        
            local sched params vals nr_requests
            local i p v j
            for i in sda mmcblk0 mmcblk1; do
                if [ -d "/sys/block/$i/queue" ]; then
                    if [ -z "$ioScheduler"  -o  "$ioScheduler" = "*" ]; then
                        sched="`chooseBestIOScheduler \"/sys/block/$i/queue/scheduler\"`"
                    else
                        sched="$ioScheduler"
                    fi
                    if validScheduler "/sys/block/$i/queue/scheduler" "$sched"; then
                        
                        params="`getSchedulerParams \"$sched\"`"
                        vals="`getSchedulerValues \"$sched\" \"$toneMode\"`"
                        nr_requests="`getSchedulerNrRequests \"$sched\" \"$toneMode\"`"
                        echo "$sched" >"/sys/block/$i/queue/scheduler"
                        echo '10240' >"/sys/block/$i/queue/read_ahead_kb"
                        echo '0' >"/sys/block/$i/queue/iostats"
                        echo '0' >"/sys/block/$i/queue/add_random"
                        echo '2' >"/sys/block/$i/queue/rq_affinity"
                        echo '2' >"/sys/block/$i/queue/nomerges"
                        echo "$nr_requests" >"/sys/block/$i/queue/nr_requests"
                        j=1
                        for p in $params; do
                            v="`nth \"$vals\" \"$j\"`"
                            v="`adjustSchedulerParameter \"$sched\" \"$p\" \"$v\"`"
                            if [ -w "/sys/block/$i/queue/iosched/$p"  -a  -n "$v"  -a  "$v" -ge 0 ]; then
                                echo "$v" >"/sys/block/$i/queue/iosched/$p"
                            fi
                            j="`expr $j + 1`"
                        done
                        
                    else
                        
                        local sched_lst="`tr -d '[]'  <\"/sys/block/$i/queue/scheduler\"`"
                        echo "Warning: ignoring wrong I/O scheduler (\"$sched\") settings for block device \"/dev/$i\"." 1>&2
                        echo "  available I/O schedulers: $sched_lst" 1>&2
                        
                    fi
                fi
            done
            
        elif [ $flag -lt 0 ]; then
        
            for i in sda mmcblk0 mmcblk1; do
                if [ -d "/sys/block/$i/queue" ]; then
                    echo 'noop' >"/sys/block/$i/queue/scheduler"
                    sleep 0.05
                    echo 'cfq' >"/sys/block/$i/queue/scheduler"
                    sleep 0.05
                    echo '128' >"/sys/block/$i/queue/read_ahead_kb"
                    echo '1' >"/sys/block/$i/queue/iostats"
                    echo '0' >"/sys/block/$i/queue/add_random"
                    echo '1' >"/sys/block/$i/queue/rq_affinity"
                    echo '0' >"/sys/block/$i/queue/nomerges"
                    echo '128' >"/sys/block/$i/queue/nr_requests"
                fi
            done
            
        fi
        
        if [ $printStatus -gt 0 ]; then
            local i j val lst
            for i in sda mmcblk0 mmcblk1; do
                if [ -d "/sys/block/$i/queue" ]; then
                    val="`selectedScheduler \"/sys/block/$i/queue/scheduler\"`"
                    echo "  I/O scheduler: $val"
                    lst="`ls \"/sys/block/$i/queue/iosched/\"*`" 2>"/dev/null"
                    if [ -n "$lst" ]; then
                        echo "    {"
                        for j in $lst; do
                            val="`cat \"$j\"`"
                            echo "      ${j##*/}: $val"
                        done
                        echo "    }"
                    fi
                    val="`cat \"/sys/block/$i/queue/read_ahead_kb\"`"
                    echo "  I/O read ahead size: $val KB"
                    val="`cat \"/sys/block/$i/queue/iostats\"`"
                    echo "  I/O iostat: $val"
                    val="`cat \"/sys/block/$i/queue/rq_affinity\"`"
                    echo "  I/O rq affinity: $val"
                    val="`cat \"/sys/block/$i/queue/nomerges\"`"
                    echo "  I/O nomerges: $val"
                    val="`cat \"/sys/block/$i/queue/nr_requests\"`"
                    echo "  I/O nr requests: $val"
                    break
                fi
            done
        fi
        
    else
        return 1
    fi
}

function reduceVmJitter()
{
    if [ $# -eq 2 ]; then
        local flag="$1"
        local printStatus="$2"

        if [ $flag -gt 0 ]; then
        
            echo '0' >"/proc/sys/vm/swappiness"
            if [ -w "/proc/sys/vm/direct_swappiness" ]; then
                echo '0' >"/proc/sys/vm/direct_swappiness"
            fi
            echo '50' >"/proc/sys/vm/dirty_ratio"
            echo '25' >"/proc/sys/vm/dirty_background_ratio"
            echo '600000' >"/proc/sys/vm/dirty_expire_centisecs"
            echo '111000' >"/proc/sys/vm/dirty_writeback_centisecs"
            echo '1' >"/proc/sys/vm/laptop_mode"
            if [ -w "/proc/sys/vm/swap_ratio" ]; then
                echo '0' >"/proc/sys/vm/swap_ratio"
            fi
            if [ -w "/proc/sys/vm/swap_ratio_enable" ]; then
                echo '1' >"/proc/sys/vm/swap_ratio_enable"
            fi
            
        elif [ $flag -lt 0 ]; then
        
             if [ -e "/dev/block/zram0" ]; then
                echo '100' >"/proc/sys/vm/swappiness"
            else
                echo '60' >"/proc/sys/vm/swappiness"
            fi
            if [ -w "/proc/sys/vm/direct_swappiness" ]; then
                echo '60' >"/proc/sys/vm/direct_swappiness"
            fi
            echo '20' >"/proc/sys/vm/dirty_ratio"
            echo '5' >"/proc/sys/vm/dirty_background_ratio"
            echo '200' >"/proc/sys/vm/dirty_expire_centisecs"
            echo '500' >"/proc/sys/vm/dirty_writeback_centisecs"
            echo '0' >"/proc/sys/vm/laptop_mode"
            if [ -w "/proc/sys/vm/swap_ratio" ]; then
                echo '100' >"/proc/sys/vm/swap_ratio"
            fi
            if [ -w "/proc/sys/vm/swap_ratio_enable" ]; then
                echo '0' >"/proc/sys/vm/swap_ratio_enable"
            fi
            
        fi
        
        if [ $printStatus -gt 0 ]; then
            # I don't know the reason, but "read val <'/proc/sys/vm/swappiness'", etc. cannot get its whole value (only first one character)
            local val
            val="`cat /proc/sys/vm/swappiness`"
            if [ -n "$val" ]; then
                echo "  VM swappiness: $val"
            fi
            if [ -r "/proc/sys/vm/direct_swappiness" ]; then
                val="`cat /proc/sys/vm/direct_swappiness`"
                if [ -n "$val" ]; then
                    echo "  VM direct_swappiness: $val"
                fi
            fi
            val="`cat /proc/sys/vm/dirty_ratio`"
            if [ -n "$val" ]; then
                echo "  VM dirty ratio: $val"
            fi
            val="`cat /proc/sys/vm/dirty_background_ratio`"
            if [ -n "$val" ]; then
                echo "  VM dirty background ratio: $val"
            fi
            val="`cat /proc/sys/vm/dirty_expire_centisecs`"
            if [ -n "$val" ]; then
                echo "  VM dirty expire centisecs: $val"
            fi
            val="`cat /proc/sys/vm/dirty_writeback_centisecs`"
            if [ -n "$val" ]; then
                echo "  VM dirty writeback centisecs: $val"
            fi
            val="`cat /proc/sys/vm/laptop_mode`"
            if [ "$val" = "1" ]; then
                echo "  VM laptop mode: on"
            else
                echo "  VM laptop mode: off"
            fi
            if [ -r "/proc/sys/vm/swap_ratio" ]; then
                val="`cat /proc/sys/vm/swap_ratio`"
                if [ -n "$val" ]; then
                    echo "  VM swap_ratio: $val"
                fi
            fi
            if [ -r "/proc/sys/vm/swap_ratio_enable" ]; then
                val="`cat /proc/sys/vm/swap_ratio_enable`"
                if [ -n "$val" ]; then
                    echo "  VM swap_ratio_enable: $val"
                fi
            fi
            # End of print status
        fi
        
    else
        return 1
    fi
}

function reloadAudioserver()
{
    # wait for system boot completion and audiosever boot up
    local i
    for i in `seq 1 3` ; do
      if [ "`getprop sys.boot_completed`" = "1"  -a  "`getprop init.svc.audioserver`" = "running" ]; then
        break
      fi
      sleep 0.9
    done

    if [ "`getprop init.svc.audioserver`" = "running" ]; then
        setprop ctl.restart audioserver
        if [ $? -gt 0 ]; then
            echo "audioserver reload failed!" 1>&2
            return 1
        else
            return 0
        fi
    else
        echo "audioserver is not running!" 1>&2 
        return 1
    fi
}

function reduceEffectJitter()
{
    if [ $# -eq 2 ]; then
        local flag="$1"
        local printStatus="$2"

        if [ $flag -gt 0 ]; then
        
            type resetprop 1>/dev/null 2>&1
            if [ $? -eq 0 ]; then
                resetprop ro.audio.ignore_effects true
                reloadAudioserver
            else
                type resetprop_phh 1>/dev/null 2>&1
                if [ $? -eq 0 ]; then
                    resetprop_phh ro.audio.ignore_effects true
                    reloadAudioserver
                else
                    return 2
                 fi
            fi
            
        elif [ $flag -lt 0 ]; then
        
            type resetprop 1>/dev/null 2>&1
            if [ $? -eq 0 ]; then
                resetprop --delete ro.audio.ignore_effects
                reloadAudioserver
            else
                type resetprop_phh 1>/dev/null 2>&1
                if [ $? -eq 0 ]; then
                    resetprop_phh --delete ro.audio.ignore_effects
                    reloadAudioserver
                else
                    return 2
                fi
            fi
            
        fi
        
        if [ $printStatus -gt 0 ]; then
            local val="`getprop ro.audio.ignore_effects`"
            if [ -n "$val"  -a  "$val" = "true" ]; then
                echo "  Effects framework: disabled"
            else
                echo "  Effects framework: enabled"
            fi
        fi
        
        return 0
        
    else
        return 1
    fi
}

function restartWifi()
{
    local val="`settings get global wifi_on`"
    
    if [ -n "$val"  -a  "$val" != "0" ]; then
        svc wifi disable
        svc wifi enable
    fi
}

function reduceWifiJitter ()
{
    if [ $# -eq 3 ]; then
        local flag="$1"
        local restartFlag="$2"
        local printStatus="$3"

        if [ $flag -gt 0 ]; then
        
            # Reducing wifi jitter by suspend wifi optimizations
            settings put global wifi_suspend_optimizations_enabled 0 1>"/dev/null" 2>&1
            if [ "$restartFlag" = "Restart" ]; then
                restartWifi
            fi
            
        elif [ $flag -lt 0 ]; then
        
            # Revert wifi jitter by suspend wifi optimizations
            settings delete global wifi_suspend_optimizations_enabled 1>"/dev/null" 2>&1
            if [ "$restartFlag" = "Restart" ]; then
                restartWifi
            fi
        
        fi
        
        if [ $printStatus -gt 0 ]; then
            local val="`settings get global wifi_suspend_optimizations_enabled`"
            if [ -n "$val"  -a  "$val" = "0" ]; then
                echo "  Wifi suspend optimizations: disabled"
            else
                echo "  Wifi suspend optimizations: enabled"
            fi
        fi

    else
        return 1
    fi
}
